code-proof of monadic law 1:

*SubsInterpreter> do x <- return (TrueVal); (\b -> return b) x 
TrueVal
*SubsInterpreter> do (\b -> return b) (TrueVal)
TrueVal


law 1:
runSubsM (do x <- return (TrueConst); evalExpr x ) initialContext 

runSubsM (do evalExpr TrueConst ) initialContext 


law 2:
runSubsM (do x <- evalExpr expr
             return x
         ) initialContext 

runSubsM (do evalExpr expr
         ) initialContext 

runSubsM (do x <- evalExpr TrueConst; return x) initialContext 
runSubsM (do evalExpr TrueConst) initialContext 


runSubsM (do x <- return TrueConst; return x) initialContext

law 3:
do { y <- do { x <- return expr;
               f x
             }
     g y
   }

do { x <- return expr;
     do { y <- f x;
          g y
        }
   }



runSubsM (do { y <- do { x <- return expr; evalExpr x}; f y}) initialContext




+ write text reasoning about it


Source of code:
https://wiki.haskell.org/Monad_Laws


